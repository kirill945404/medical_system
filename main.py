import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
from db_utils import get_doctor_categories, execute_sql, add_user, get_hospitals_by_category, \
    get_doctors_by_category_and_hospital, get_doctor_info, get_hospital_info, add_appointment, get_user_id_by_chat_id, \
    get_booked_hours, get_user_appointments_info, cancel_appointment_by_id, get_appointment_info
import datetime
import holidays

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


def main_menu_keyboard():
    icons = ["üîç"]  # –ó–Ω–∞—á–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–ü–æ–∏—Å–∫" –∏ "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç –∑–∞–ø–∏—Å–∏"
    keyboard = [[f"{icons[0]} –ü–æ–∏—Å–∫", f" –ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏"]]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def category_menu_keyboard(categories):
    return ReplyKeyboardMarkup([[category] for category in categories] + [["–ù–∞–∑–∞–¥"]], resize_keyboard=True)


def start(update: Update, context: CallbackContext) -> None:
    try:
        chat_id = update.message.chat_id
        username = update.message.from_user.username
        add_user(chat_id, username)

        update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á–∞–º. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫" –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞ —Ç–∞–ª–æ–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É',
            reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.error("An error occurred in the start function: %s", e)


def search(update: Update, context: CallbackContext) -> None:
    try:
        if update.message.text == "üîç –ü–æ–∏—Å–∫":
            categories = get_doctor_categories()

            if not categories:
                update.message.reply_text('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤—Ä–∞—á–µ–π')
                return

            update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞', reply_markup=category_menu_keyboard(categories))
        elif update.message.text == "–ù–∞–∑–∞–¥":
            update.message.reply_text('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu_keyboard())
        elif update.message.text == "–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏":
            # Handle "–ú–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏" button press
            chat_id = update.message.chat_id
            user_id = get_user_id_by_chat_id(chat_id)
            if user_id:
                appointments_info = get_user_appointments_info(user_id)
                if appointments_info:
                    for appointment_info in appointments_info:
                        appointment_id, first_name, last_name, hospital_name, hospital_address, appointment_date = appointment_info
                        message_text = f"–í—Ä–∞—á: {first_name} {last_name}, –ú–µ—Å—Ç–æ: {hospital_name}, –ê–¥—Ä–µ—Å: {hospital_address}, –í—Ä–µ–º—è: {appointment_date}"
                        inline_keyboard = [
                            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"cancel_{appointment_id}")]]
                        reply_markup = InlineKeyboardMarkup(inline_keyboard)
                        update.message.reply_text(message_text, reply_markup=reply_markup)
                else:
                    update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
            else:
                update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        else:
            hospitals = get_hospitals_by_category(update.message.text)
            if not hospitals:
                update.message.reply_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–ª–æ—Å—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π —Å –≤—Ä–∞—á–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ '
                                          '–∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['selected_category'] = update.message.text

            inline_keyboard = [[InlineKeyboardButton(hospital['name'], callback_data=f"hospital_{hospital['id']}")] for
                               hospital in hospitals]
            reply_markup = InlineKeyboardMarkup(inline_keyboard)
            update.message.reply_text(
                "–ù–∞—à–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —É—á—Ä–µ–∂–¥–µ–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –≤—Ä–∞—á–∏ –Ω—É–∂–Ω–æ–π –≤–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è:",
                reply_markup=reply_markup)

    except Exception as e:
        logger.error("An error occurred in the search function: %s", e)

def cancel_appointment(update: Update, context: CallbackContext) -> None:
    try:
        query = update.callback_query
        query.answer()

        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        appointment_id = query.data.split('_')[1]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        appointment_info = get_appointment_info(appointment_id)

        if not appointment_info:
            query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏.")
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ø–∏—Å–∏
        doctor_name = appointment_info['doctor_name']
        appointment_date = appointment_info['appointment_date']

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
        message_text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É {doctor_name} –Ω–∞ {appointment_date}?"

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
        inline_keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data=f"confirm_cancel_{appointment_id}"),
             InlineKeyboardButton("–ù–µ—Ç", callback_data=f"rollback")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏
        query.edit_message_text(message_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error("An error occurred in the cancel_appointment function: %s", e)


def confirm_cancel_appointment(update: Update, context: CallbackContext) -> None:
    try:
        query = update.callback_query
        query.answer()

        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        appointment_id = query.data.split('_')[2]

        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–ø–∏—Å—å
        cancel_appointment_by_id(appointment_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏
        query.edit_message_text("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.error("An error occurred in the confirm_cancel_appointment function: %s", e)


def cancel_cancel_operation(update: Update, context: CallbackContext) -> None:
    try:
        query = update.callback_query
        query.answer()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞
        query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    except Exception as e:
        logger.error("An error occurred in the cancel_cancel_operation function: %s", e)

def confirm_appointment(update: Update, context: CallbackContext) -> None:
    try:
        query = update.callback_query
        query.answer()

        selected_time = query.data.split('_')[2]  # –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM'


        doctor_id = context.user_data.get('selected_doctor')
        hospital_id = context.user_data.get('selected_hospital')
        chat_id = update.effective_user.id
        user_id = get_user_id_by_chat_id(chat_id)  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ –∏ –±–æ–ª—å–Ω–∏—Ü–µ
        doctor_info = get_doctor_info(doctor_id)
        hospital_info = get_hospital_info(hospital_id)

        if doctor_info is None or hospital_info is None:
            query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        message_text = f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –≤—Ä–∞—á—É {doctor_info['first_name']} {doctor_info['last_name']} " \
                       f"–≤ –±–æ–ª—å–Ω–∏—Ü—É {hospital_info['name']} –Ω–∞ {selected_time}?"

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
        inline_keyboard = [
            [InlineKeyboardButton("–î–∞", callback_data=f"confirm_appointment"),
             InlineKeyboardButton("–ù–µ—Ç", callback_data=f"rollback")]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)

        query.edit_message_text(message_text, reply_markup=reply_markup)
    except Exception as e:
        logger.error("An error occurred in the confirm_appointment function: %s", e)
def confirm_appointment_addition(update: Update, context: CallbackContext) -> None:
    try:
        query = update.callback_query
        query.answer()
        selected_date = query.data.split('_')[2]  # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD'
        selected_time = query.data.split('_')[3]  # –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'HH:MM'

        time_obj = datetime.datetime.strptime(selected_time, '%H:%M').time()

        date_obj = datetime.datetime.strptime(selected_date, '%Y-%m-%d').date()
        appointment_datetime = datetime.datetime.combine(date_obj, time_obj)

        doctor_id = context.user_data.get('selected_doctor')
        hospital_id = context.user_data.get('selected_hospital')
        chat_id = update.effective_user.id
        user_id = get_user_id_by_chat_id(chat_id)  # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_appointment(user_id, doctor_id, appointment_datetime)

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–∞—á–µ –∏ –±–æ–ª—å–Ω–∏—Ü–µ
        doctor_info = get_doctor_info(doctor_id)
        hospital_info = get_hospital_info(hospital_id)

        if doctor_info is None or hospital_info is None:
            query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        query.edit_message_text(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –≤—Ä–∞—á—É {doctor_info['first_name']} {doctor_info['last_name']} "
            f"–≤ –±–æ–ª—å–Ω–∏—Ü—É {hospital_info['name']} –Ω–∞ {selected_time}."
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.pop('selected_doctor', None)
        context.user_data.pop('selected_hospital', None)
        context.user_data.pop('selected_category', None)

    except Exception as e:
        logger.error("An error occurred in the confirm_appointment_addition function: %s", e)



def doctor_selected_hour(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        selected_date = query.data.split('_')[1]
        selected_date = datetime.datetime.strptime(selected_date, '%Y-%m-%d').date()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Å–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ (—Å 9:00 –¥–æ 14:00)
        available_hours = [datetime.time(hour) for hour in range(9, 15)]

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        booked_hours = get_booked_hours(selected_date, doctor_id=context.user_data.get('selected_doctor'))

        # –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Å–æ–≤ —Ç–µ, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏
        available_hours = [hour for hour in available_hours if hour not in booked_hours]

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —á–∞—Å–∞
        inline_keyboard = [[InlineKeyboardButton(hour.strftime('%H:%M'),
                                                 callback_data=f"time_{selected_date}_{hour.strftime('%H:%M')}")] for
                           hour in available_hours]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)

        query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –≤—Ä–∞—á–∞ {selected_date.strftime('%d %B')}:",
                                reply_markup=reply_markup)
    except Exception as e:
        logger.error("An error occurred in the doctor_selected_hour function: %s", e)


def doctor_selected_day(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        query.answer()

        selected_doctor_id = query.data.split('_')[1]
        context.user_data['selected_doctor'] = selected_doctor_id

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö 14 –¥–Ω–µ–π –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        today = datetime.date.today()
        dates = [today + datetime.timedelta(days=i) for i in range(14)]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        my_holidays = holidays.Russia()
        workdays = [date for date in dates if date.weekday() < 5 and date not in my_holidays]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
        available_workdays = []
        for date in workdays:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Å–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–∞—á–∞
            booked_hours = get_booked_hours(date, doctor_id=selected_doctor_id)

            # –ï—Å–ª–∏ –≤—Å–µ —á–∞—Å—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –¥–µ–Ω—å
            if len(booked_hours) == 6:
                continue
            available_workdays.append(date)

        if not available_workdays:
            query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –¥–Ω–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã
        inline_keyboard = [
            [InlineKeyboardButton(date.strftime('%d %B'), callback_data=f"day_{date.strftime('%Y-%m-%d')}")] for date in
            available_workdays]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)

        query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –≤—Ä–∞—á–∞:", reply_markup=reply_markup)
    except Exception as e:
        logger.error("An error occurred in the doctor_selected_day function: %s", e)
        raise e



def button(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        query.answer()

        # –ü–æ–ª—É—á–∞–µ–º ID –±–æ–ª—å–Ω–∏—Ü—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–±—ç–∫–∞
        hospital_id = query.data.split('_')[1]
        context.user_data['selected_hospital'] = hospital_id
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selected_category = context.user_data.get('selected_category')

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–∞—á–µ–π –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —ç—Ç–æ–π –±–æ–ª—å–Ω–∏—Ü–µ
        doctors = get_doctors_by_category_and_hospital(selected_category, hospital_id)

        if not doctors:
            query.edit_message_text("–í –¥–∞–Ω–Ω–æ–π –±–æ–ª—å–Ω–∏—Ü–µ –Ω–µ—Ç –≤—Ä–∞—á–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            return

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞—á–∞
        inline_keyboard = [[InlineKeyboardButton(f"{doctor['first_name']} {doctor['last_name']}",
                                                 callback_data=f"doctor_{doctor['id']}")] for doctor in doctors]
        reply_markup = InlineKeyboardMarkup(inline_keyboard)

        query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞:", reply_markup=reply_markup)
    except Exception as e:
        logger.error("An error occurred in the button function: %s", e)

def main() -> None:
    try:
        execute_sql()

        updater = Updater("6050183570:AAHMEeI293cB8dslPjD2M9Fq904TxV8zCoc", use_context=True)

        dispatcher = updater.dispatcher

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥, —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±—ç–∫–æ–≤
        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, search))
        dispatcher.add_handler(CallbackQueryHandler(button, pattern="hospital_"))
        dispatcher.add_handler(CallbackQueryHandler(doctor_selected_day, pattern=r'^doctor_'))
        dispatcher.add_handler(CallbackQueryHandler(doctor_selected_hour, pattern=r'^day_'))
        dispatcher.add_handler(CallbackQueryHandler(confirm_appointment, pattern=r'^time_'))
        dispatcher.add_handler(CallbackQueryHandler(cancel_appointment, pattern=r'^cancel_'))
        dispatcher.add_handler(CallbackQueryHandler(confirm_cancel_appointment, pattern=r'^confirm_cancel_'))
        dispatcher.add_handler(CallbackQueryHandler(cancel_cancel_operation, pattern=r'^rollback'))
        dispatcher.add_handler(CallbackQueryHandler(confirm_appointment_addition, pattern=r'^confirm_appointment'))

        updater.start_polling()

        updater.idle()
    except Exception as e:
        logger.error("An error occurred in the main function: %s", e)

if __name__ == '__main__':
    main()
